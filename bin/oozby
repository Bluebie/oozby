#!/usr/bin/env ruby
require 'thor' # command line utility utility
require 'listen' # listen to filesystem for changes in a smart way
require 'pp' # pretty printer
require 'rbconfig' # to get path to ruby binary, for making subprocesses
require 'colored' # ANSI colouring
require File.join(__dir__, '..', 'lib', 'oozby')

class OozbyUtility < Thor
  QuitMessage = "All done! ^_^"
  desc "compile some#{File::SEPARATOR}folder", "The Oozby Utility searches a directory and compiles all the .oozby files it finds, creating identically named files with .scad stuck on the end, translated in to OpenSCAD nonsense. Open those files in OpenSCAD app and enable Automatic Reload and Compile in the Design menu, then get to work."
  
  option :verbose, type: :boolean, desc: "Output lots of gunk, to figure out bizarre bugs in Oozby"
  option :abstract_tree, type: :boolean, desc: "Output Abstract Tree (debugging)"
  option :all, type: :boolean, desc: "Don't skip any files - recompile them all!"
  option :no_watch, type: :boolean, desc: "Don't watch directory for changes - exit immediately"
  def compile path
    if File.file? path
      ooz = Oozby.new
      ooz.filter_errors = !options[:verbose]
      ooz.debug = options[:verbose]
      
      begin
        ooz.parse_file path
      
        if options[:abstract_tree]
          puts "Oozby Abstract Syntax Tree:"
          pp ooz.abstract_tree
        end
      
        File.open(path + '.scad', 'w') do |handle|
          handle.write ooz.render
        end
        
        print "[#{Time.now.strftime "%H:%M:%S"}] "
        puts "Compiled #{File.basename(path).underline}".green
      rescue StandardError, ScriptError, NoMethodError => err
        local_pwd = Dir.pwd
        puts "#{err.class.name.reversed}: #{err.message.sub(local_pwd + File::SEPARATOR, '').red}"
        err.backtrace.each { |line| puts line.sub(local_pwd + File::SEPARATOR, '') }
        puts nil, nil
      end
      
    elsif File.directory? path
      directory = File.absolute_path(path) # calculate real absolute path - follow any links
      globber = File.join(directory, '**', '*.oozby')
      files = Dir.glob(globber)
      files.each do |filename|
        subprocess_compile filename if !File.exists?("#{filename}.scad") || File.mtime(filename) >= File.mtime("#{filename}.scad") || options[:all]
      end
      
      unless options[:no_watch]
        recompile_handler = lambda do |*args|
          subprocess_compile File.join(*args)
        end
        
        puts "Watching folder for changes...".blue + " (" + "CTRL+C".bold + " to exit)"
        listener = Listen.to(directory, ignore: /[^\.][^o][^o][^z][^b][^y]$/) do |modified, added, removed|
          modified.each { |path| recompile_handler[path] }
          added.each { |path| recompile_handler[path] }
          removed.each do |path|
            puts "#{File.basename(path)} deleted."
            if File.exists? "#{path}.scad"
              File.delete("#{path}.scad")
              puts "Deleted #{(File.basename(path) + '.scad').underline}".green
            end
          end
        end
        
        listener.start
        sleep
      end
    end
  rescue Interrupt => e
    puts ""
    puts QuitMessage.blue
  end
  
  # fetch version of oozby
  desc "version", "Check version of oozby installed"
  map '-v' => :version, '--version' => :version
  def version
    Puts "Oozby Version: #{Oozby.version}"
  end
  
  private
  # open up a subprocess to execute this file, so we don't polute the scope when watching
  # or processing several files
  def subprocess_compile filename
    this_file = File.expand_path(__FILE__)
    ruby_bin = File.join(RbConfig::CONFIG['bindir'], RbConfig::CONFIG['ruby_install_name'])
    args = [ruby_bin, this_file, 'compile']
    args.push '--verbose' if options[:verbose]
    args.push filename
    system(*args)
  end
end

OozbyUtility.start(ARGV)

